{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport React, { useEffect, useState } from \"react\";\nimport { API } from \"../api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar NotificationScreen = function NotificationScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tokens = _useState2[0],\n      setTokens = _useState2[1];\n\n  var getTokens = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var data = yield fetch(API + \"/notification/tokens\");\n      var res = yield data.json();\n      setTokens(res);\n    });\n\n    return function getTokens() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    getTokens();\n  }, []);\n\n  var handleSubmit = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var tokensArray = [];\n      tokens.forEach(function (element) {\n        tokensArray.push(element.token);\n      });\n\n      for (var i = 0; i < tokensArray.length; i++) {\n        yield fetch(\"https://exp.host/--/api/v2/push/send\", {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Accept-Encoding\": \"gzip, deflate\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            to: tokensArray[i],\n            data: {\n              extraData: \"Some data\"\n            },\n            title: \"La piconera\",\n            body: \"Comanda nueva\"\n          })\n        });\n      }\n    });\n\n    return function handleSubmit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"NotificationScreen\"\n    }), _jsx(Button, {\n      title: \"Click\",\n      onPress: function onPress() {\n        return handleSubmit();\n      }\n    })]\n  });\n};\n\nexport default NotificationScreen;","map":{"version":3,"names":["React","useEffect","useState","API","NotificationScreen","tokens","setTokens","getTokens","data","fetch","res","json","handleSubmit","tokensArray","forEach","element","push","token","i","length","method","headers","Accept","body","JSON","stringify","to","extraData","title"],"sources":["C:/Users/xabig/Desktop/ProyectoPiconera2/clientev2/screens/NotificationScreen.js"],"sourcesContent":["import { View, Text, Button } from \"react-native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {API} from '../api'\r\n\r\nconst NotificationScreen = () => {\r\n  const [tokens, setTokens] = useState([]);\r\n\r\n  const getTokens = async () => {\r\n    const data = await fetch(`${API}/notification/tokens`);\r\n    const res = await data.json()\r\n    setTokens(res)\r\n  };\r\n  useEffect(() => {\r\n    getTokens();\r\n  }, []);\r\n\r\n  const handleSubmit = async () => {\r\n    let tokensArray = []\r\n    tokens.forEach(element => {\r\n      tokensArray.push(element.token)\r\n    })\r\n  \r\n    for(let i = 0; i<tokensArray.length; i++){\r\n      await fetch(\"https://exp.host/--/api/v2/push/send\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Accept-Encoding\": \"gzip, deflate\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        to: tokensArray[i],\r\n        data: { extraData: \"Some data\" },\r\n        title: \"La piconera\",\r\n        body: \"Comanda nueva\",\r\n      }),\r\n    });\r\n    }\r\n  };\r\n  return (\r\n    <View>\r\n      <Text>NotificationScreen</Text>\r\n      <Button title=\"Click\" onPress={() => handleSubmit()} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default NotificationScreen;\r\n"],"mappings":";;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,GAAR;;;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;EAC/B,gBAA4BF,QAAQ,CAAC,EAAD,CAApC;EAAA;EAAA,IAAOG,MAAP;EAAA,IAAeC,SAAf;;EAEA,IAAMC,SAAS;IAAA,6BAAG,aAAY;MAC5B,IAAMC,IAAI,SAASC,KAAK,CAAIN,GAAJ,0BAAxB;MACA,IAAMO,GAAG,SAASF,IAAI,CAACG,IAAL,EAAlB;MACAL,SAAS,CAACI,GAAD,CAAT;IACD,CAJc;;IAAA,gBAATH,SAAS;MAAA;IAAA;EAAA,GAAf;;EAKAN,SAAS,CAAC,YAAM;IACdM,SAAS;EACV,CAFQ,EAEN,EAFM,CAAT;;EAIA,IAAMK,YAAY;IAAA,8BAAG,aAAY;MAC/B,IAAIC,WAAW,GAAG,EAAlB;MACAR,MAAM,CAACS,OAAP,CAAe,UAAAC,OAAO,EAAI;QACxBF,WAAW,CAACG,IAAZ,CAAiBD,OAAO,CAACE,KAAzB;MACD,CAFD;;MAIA,KAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACL,WAAW,CAACM,MAA7B,EAAqCD,CAAC,EAAtC,EAAyC;QACvC,MAAMT,KAAK,CAAC,sCAAD,EAAyC;UACpDW,MAAM,EAAE,MAD4C;UAEpDC,OAAO,EAAE;YACPC,MAAM,EAAE,kBADD;YAEP,mBAAmB,eAFZ;YAGP,gBAAgB;UAHT,CAF2C;UAOpDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;YACnBC,EAAE,EAAEb,WAAW,CAACK,CAAD,CADI;YAEnBV,IAAI,EAAE;cAAEmB,SAAS,EAAE;YAAb,CAFa;YAGnBC,KAAK,EAAE,aAHY;YAInBL,IAAI,EAAE;UAJa,CAAf;QAP8C,CAAzC,CAAX;MAcD;IACF,CAtBiB;;IAAA,gBAAZX,YAAY;MAAA;IAAA;EAAA,GAAlB;;EAuBA,OACE,MAAC,IAAD;IAAA,WACE,KAAC,IAAD;MAAA;IAAA,EADF,EAEE,KAAC,MAAD;MAAQ,KAAK,EAAC,OAAd;MAAsB,OAAO,EAAE;QAAA,OAAMA,YAAY,EAAlB;MAAA;IAA/B,EAFF;EAAA,EADF;AAMD,CAzCD;;AA2CA,eAAeR,kBAAf"},"metadata":{},"sourceType":"module"}