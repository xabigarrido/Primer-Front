{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { PermissionStatus, Platform } from 'expo-modules-core';\n\nfunction convertPermissionStatus(status) {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true\n      };\n\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false\n      };\n\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false\n      };\n  }\n}\n\nfunction resolvePermissionAsync(_x) {\n  return _resolvePermissionAsync.apply(this, arguments);\n}\n\nfunction _resolvePermissionAsync() {\n  _resolvePermissionAsync = _asyncToGenerator(function* (_ref) {\n    var _navigator, _navigator$permission;\n\n    var shouldAsk = _ref.shouldAsk;\n\n    if (!Platform.isDOMAvailable) {\n      return convertPermissionStatus('denied');\n    }\n\n    var _window = window,\n        _window$Notification = _window.Notification,\n        Notification = _window$Notification === void 0 ? {} : _window$Notification;\n\n    if (typeof Notification.requestPermission !== 'undefined') {\n      var status = Notification.permission;\n\n      if (shouldAsk) {\n        status = yield new Promise(function (resolve, reject) {\n          var _Notification$request, _Notification$request2;\n\n          var resolved = false;\n\n          function resolveOnce(status) {\n            if (!resolved) {\n              resolved = true;\n              resolve(status);\n            }\n          }\n\n          (_Notification$request = Notification.requestPermission(resolveOnce)) == null ? void 0 : (_Notification$request2 = _Notification$request.then(resolveOnce)) == null ? void 0 : _Notification$request2.catch(reject);\n        });\n      }\n\n      return convertPermissionStatus(status);\n    } else if (typeof navigator !== 'undefined' && (_navigator = navigator) != null && (_navigator$permission = _navigator.permissions) != null && _navigator$permission.query) {\n      var query = yield navigator.permissions.query({\n        name: 'notifications'\n      });\n      return convertPermissionStatus(query.state);\n    }\n\n    return convertPermissionStatus('denied');\n  });\n  return _resolvePermissionAsync.apply(this, arguments);\n}\n\nexport default {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getPermissionsAsync: function () {\n    var _getPermissionsAsync = _asyncToGenerator(function* () {\n      return resolvePermissionAsync({\n        shouldAsk: false\n      });\n    });\n\n    function getPermissionsAsync() {\n      return _getPermissionsAsync.apply(this, arguments);\n    }\n\n    return getPermissionsAsync;\n  }(),\n  requestPermissionsAsync: function () {\n    var _requestPermissionsAsync = _asyncToGenerator(function* (request) {\n      return resolvePermissionAsync({\n        shouldAsk: true\n      });\n    });\n\n    function requestPermissionsAsync(_x2) {\n      return _requestPermissionsAsync.apply(this, arguments);\n    }\n\n    return requestPermissionsAsync;\n  }()\n};","map":{"version":3,"sources":["../src/NotificationPermissionsModule.ts"],"names":[],"mappings":";AAAA,SAAS,gBAAT,EAA2B,QAA3B,QAA2C,mBAA3C;;AAQA,SAAS,uBAAT,CACE,MADF,EAC4C;EAE1C,QAAQ,MAAR;IACE,KAAK,SAAL;MACE,OAAO;QACL,MAAM,EAAE,gBAAgB,CAAC,OADpB;QAEL,OAAO,EAAE,OAFJ;QAGL,WAAW,EAAE,KAHR;QAIL,OAAO,EAAE;MAJJ,CAAP;;IAMF,KAAK,QAAL;MACE,OAAO;QACL,MAAM,EAAE,gBAAgB,CAAC,MADpB;QAEL,OAAO,EAAE,OAFJ;QAGL,WAAW,EAAE,KAHR;QAIL,OAAO,EAAE;MAJJ,CAAP;;IAMF;MACE,OAAO;QACL,MAAM,EAAE,gBAAgB,CAAC,YADpB;QAEL,OAAO,EAAE,OAFJ;QAGL,WAAW,EAAE,IAHR;QAIL,OAAO,EAAE;MAJJ,CAAP;EAhBJ;AAuBD;;SAEc,sB;;;;;8CAAf,iBAIC;IAAA;;IAAA,IAHC,SAGD,QAHC,SAGD;;IACC,IAAI,CAAC,QAAQ,CAAC,cAAd,EAA8B;MAC5B,OAAO,uBAAuB,CAAC,QAAD,CAA9B;IACD;;IAED,cAA8B,MAA9B;IAAA,mCAAQ,YAAR;IAAA,IAAQ,YAAR,qCAAuB,EAAvB;;IACA,IAAI,OAAO,YAAY,CAAC,iBAApB,KAA0C,WAA9C,EAA2D;MACzD,IAAI,MAAM,GAAG,YAAY,CAAC,UAA1B;;MACA,IAAI,SAAJ,EAAe;QACb,MAAM,SAAS,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;UAAA;;UAC7C,IAAI,QAAQ,GAAG,KAAf;;UACA,SAAS,WAAT,CAAqB,MAArB,EAAmC;YACjC,IAAI,CAAC,QAAL,EAAe;cACb,QAAQ,GAAG,IAAX;cACA,OAAO,CAAC,MAAD,CAAP;YACD;UACF;;UAED,yBAAA,YAAY,CAAC,iBAAb,CAA+B,WAA/B,sEAA6C,IAA7C,CAAkD,WAAlD,6CAAgE,KAAhE,CAAsE,MAAtE;QACD,CAVc,CAAf;MAWD;;MACD,OAAO,uBAAuB,CAAC,MAAD,CAA9B;IACD,CAhBD,MAgBO,IAAI,OAAO,SAAP,KAAqB,WAArB,kBAAoC,SAApC,sCAAoC,WAAW,WAA/C,aAAoC,sBAAwB,KAAhE,EAAuE;MAE5E,IAAM,KAAK,SAAS,SAAS,CAAC,WAAV,CAAsB,KAAtB,CAA4B;QAAE,IAAI,EAAE;MAAR,CAA5B,CAApB;MACA,OAAO,uBAAuB,CAAC,KAAK,CAAC,KAAP,CAA9B;IACD;;IAED,OAAO,uBAAuB,CAAC,QAAD,CAA9B;EACD,C;;;;AAED,eAAe;EACb,WAAW,EAAE,uBAAK,CAAG,CADR;EAEb,eAAe,EAAE,2BAAK,CAAG,CAFZ;EAGP,mBAHO;IAAA,0DAGY;MACvB,OAAO,sBAAsB,CAAC;QAAE,SAAS,EAAE;MAAb,CAAD,CAA7B;IACD,CALY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAMP,uBANO;IAAA,4DAOX,OAPW,EAOkC;MAE7C,OAAO,sBAAsB,CAAC;QAAE,SAAS,EAAE;MAAb,CAAD,CAA7B;IACD,CAVY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,CAAf","sourcesContent":["import { PermissionStatus, Platform } from 'expo-modules-core';\n\nimport {\n  NativeNotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport { NotificationPermissionsModule } from './NotificationPermissionsModule.types';\n\nfunction convertPermissionStatus(\n  status?: NotificationPermission | 'prompt'\n): NotificationPermissionsStatus {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true,\n      };\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false,\n      };\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n  }\n}\n\nasync function resolvePermissionAsync({\n  shouldAsk,\n}: {\n  shouldAsk: boolean;\n}): Promise<NotificationPermissionsStatus> {\n  if (!Platform.isDOMAvailable) {\n    return convertPermissionStatus('denied');\n  }\n\n  const { Notification = {} } = window as any;\n  if (typeof Notification.requestPermission !== 'undefined') {\n    let status = Notification.permission;\n    if (shouldAsk) {\n      status = await new Promise((resolve, reject) => {\n        let resolved = false;\n        function resolveOnce(status: string) {\n          if (!resolved) {\n            resolved = true;\n            resolve(status);\n          }\n        }\n        // Some browsers require a callback argument and some return a Promise\n        Notification.requestPermission(resolveOnce)?.then(resolveOnce)?.catch(reject);\n      });\n    }\n    return convertPermissionStatus(status);\n  } else if (typeof navigator !== 'undefined' && navigator?.permissions?.query) {\n    // TODO(Bacon): Support `push` in the future when it's stable.\n    const query = await navigator.permissions.query({ name: 'notifications' });\n    return convertPermissionStatus(query.state);\n  }\n  // Platforms like iOS Safari don't support Notifications so return denied.\n  return convertPermissionStatus('denied');\n}\n\nexport default {\n  addListener: () => {},\n  removeListeners: () => {},\n  async getPermissionsAsync(): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: false });\n  },\n  async requestPermissionsAsync(\n    request: NativeNotificationPermissionsRequest\n  ): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: true });\n  },\n} as NotificationPermissionsModule;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}