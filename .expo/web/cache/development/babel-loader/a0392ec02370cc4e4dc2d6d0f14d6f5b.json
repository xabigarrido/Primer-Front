{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\nexport default function getDevicePushTokenAsync() {\n  return _getDevicePushTokenAsync.apply(this, arguments);\n}\n\nfunction _getDevicePushTokenAsync() {\n  _getDevicePushTokenAsync = _asyncToGenerator(function* () {\n    var data = yield _subscribeDeviceToPushNotificationsAsync();\n    SyntheticPlatformEmitter.emit('onDevicePushToken', {\n      devicePushToken: data\n    });\n    return {\n      type: Platform.OS,\n      data: data\n    };\n  });\n  return _getDevicePushTokenAsync.apply(this, arguments);\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError('ERR_UNAVAILABLE', 'The Web Notifications API is not available on this device.');\n  }\n\n  if (!navigator.serviceWorker) {\n    throw new CodedError('ERR_UNAVAILABLE', 'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED', \"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");\n  }\n}\n\nfunction _subscribeDeviceToPushNotificationsAsync() {\n  return _subscribeDeviceToPushNotificationsAsync2.apply(this, arguments);\n}\n\nfunction _subscribeDeviceToPushNotificationsAsync2() {\n  _subscribeDeviceToPushNotificationsAsync2 = _asyncToGenerator(function* () {\n    var _Constants$expoConfig, _Constants$expoConfig2, _Constants$expoConfig3, _Constants$expoConfig4, _Constants$expoConfig5, _Constants$expoConfig6;\n\n    var vapidPublicKey = (_Constants$expoConfig = Constants.expoConfig) == null ? void 0 : (_Constants$expoConfig2 = _Constants$expoConfig.notification) == null ? void 0 : _Constants$expoConfig2.vapidPublicKey;\n\n    if (!vapidPublicKey) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.');\n    }\n\n    var serviceWorkerPath = (_Constants$expoConfig3 = Constants.expoConfig) == null ? void 0 : (_Constants$expoConfig4 = _Constants$expoConfig3.notification) == null ? void 0 : _Constants$expoConfig4.serviceWorkerPath;\n\n    if (!serviceWorkerPath) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION', 'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');\n    }\n\n    guardPermission();\n    var registration = null;\n\n    try {\n      registration = yield navigator.serviceWorker.register(serviceWorkerPath);\n    } catch (error) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', \"Could not register this device for push notifications because the service worker (\" + serviceWorkerPath + \") could not be registered: \" + error);\n    }\n\n    yield navigator.serviceWorker.ready;\n\n    if (!registration.active) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'Could not register this device for push notifications because the service worker is not active.');\n    }\n\n    var subscribeOptions = {\n      userVisibleOnly: true,\n      applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey)\n    };\n    var pushSubscription = null;\n\n    try {\n      pushSubscription = yield registration.pushManager.subscribe(subscribeOptions);\n    } catch (error) {\n      throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + error + ')');\n    }\n\n    var pushSubscriptionJson = pushSubscription.toJSON();\n    var subscriptionObject = {\n      endpoint: pushSubscriptionJson.endpoint,\n      keys: {\n        p256dh: pushSubscriptionJson.keys.p256dh,\n        auth: pushSubscriptionJson.keys.auth\n      }\n    };\n    var notificationIcon = ((_Constants$expoConfig5 = (_Constants$expoConfig6 = Constants.expoConfig) == null ? void 0 : _Constants$expoConfig6.notification) != null ? _Constants$expoConfig5 : {}).icon;\n    yield registration.active.postMessage(JSON.stringify({\n      fromExpoWebClient: {\n        notificationIcon: notificationIcon\n      }\n    }));\n    return subscriptionObject;\n  });\n  return _subscribeDeviceToPushNotificationsAsync2.apply(this, arguments);\n}\n\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}","map":{"version":3,"sources":["../src/getDevicePushTokenAsync.web.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  // @ts-expect-error: TODO: not on the schema\n  const vapidPublicKey: string | null = Constants.expoConfig?.notification?.vapidPublicKey;\n  if (!vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  // @ts-expect-error: TODO: not on the schema\n  const serviceWorkerPath = Constants.expoConfig?.notification?.serviceWorkerPath;\n  if (!serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(serviceWorkerPath);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      `Could not register this device for push notifications because the service worker (${serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.expoConfig?.notification ?? {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}