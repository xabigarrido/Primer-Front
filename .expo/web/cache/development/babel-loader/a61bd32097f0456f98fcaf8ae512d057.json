{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"orientation\", \"thickness\", \"color\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport Box from \"./Box\";\n\nvar Divider = function Divider(_ref) {\n  var _ref$orientation = _ref.orientation,\n      orientation = _ref$orientation === void 0 ? 'horizontal' : _ref$orientation,\n      _ref$thickness = _ref.thickness,\n      thickness = _ref$thickness === void 0 ? 1 : _ref$thickness,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? '#E0E0E0' : _ref$color,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var dividerStyle = useMemo(function () {\n    if (orientation === 'horizontal') return {\n      height: thickness,\n      backgroundColor: color\n    };else return {\n      width: thickness,\n      backgroundColor: color\n    };\n  }, [orientation, thickness, color]);\n  return React.createElement(Box, _extends({\n    style: [dividerStyle, style]\n  }, rest));\n};\n\nexport default Divider;","map":{"version":3,"sources":["Divider.tsx"],"names":["Divider","orientation","thickness","color","rest","dividerStyle","useMemo","height","backgroundColor","width"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,OAAA,QAAA,OAAA;AAEA,OAAA,GAAA;;AAyBA,IAAMA,OAA+B,GAAG,SAAlCA,OAAkC,CAAA,IAAA,EAMlC;EANmC,uBAMnC,IANmC,CACvCC,WADuC;EAAA,IACvCA,WADuC,iCAAA,YAAA;EAAA,qBAMnC,IANmC,CAEvCC,SAFuC;EAAA,IAEvCA,SAFuC,+BAAA,CAAA;EAAA,iBAMnC,IANmC,CAGvCC,KAHuC;EAAA,IAGvCA,KAHuC,2BAAA,SAAA;EAAA,IAAA,KAAA,GAMnC,IANmC,CAAA,KAAA;EAAA,IAKpCC,IALoC,4BAMnC,IANmC;;EAOvC,IAAMC,YAAY,GAAGC,OAAO,CAAC,YAAM;IACjC,IAAIL,WAAW,KAAf,YAAA,EACE,OAAO;MAAEM,MAAM,EAAR,SAAA;MAAqBC,eAAe,EAAEL;IAAtC,CAAP,CADF,KAEK,OAAO;MAAEM,KAAK,EAAP,SAAA;MAAoBD,eAAe,EAAEL;IAArC,CAAP;EAHqB,CAAA,EAIzB,CAAA,WAAA,EAAA,SAAA,EAJH,KAIG,CAJyB,CAA5B;EAMA,OAAO,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;IAAK,KAAK,EAAE,CAAA,YAAA,EAAA,KAAA;EAAZ,CAAA,EAAP,IAAO,CAAA,CAAP;AAbF,CAAA;;AAgBA,eAAA,OAAA","sourcesContent":["import React, { useMemo } from 'react';\nimport type { BoxProps } from './Box';\nimport Box from './Box';\n\nexport interface DividerProps extends BoxProps {\n  /**\n   * The orientation of the divider.\n   *\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n\n  /**\n   * The thickness of the divider.\n   *\n   * @default 1\n   */\n  thickness?: number;\n\n  /**\n   * The color of the divider.\n   *\n   * @default '#E0E0E0'\n   */\n  color?: string;\n}\n\nconst Divider: React.FC<DividerProps> = ({\n  orientation = 'horizontal',\n  thickness = 1,\n  color = '#E0E0E0',\n  style,\n  ...rest\n}) => {\n  const dividerStyle = useMemo(() => {\n    if (orientation === 'horizontal')\n      return { height: thickness, backgroundColor: color };\n    else return { width: thickness, backgroundColor: color };\n  }, [orientation, thickness, color]);\n\n  return <Box style={[dividerStyle, style]} {...rest} />;\n};\n\nexport default Divider;\n"]},"metadata":{},"sourceType":"module"}