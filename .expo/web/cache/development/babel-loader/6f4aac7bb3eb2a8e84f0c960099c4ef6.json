{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useMemo } from 'react';\nimport { useSpacingFunc } from 'react-native-flex-layout';\nimport { useTheme } from \"../base/ThemeContext\";\nimport { useWindowSizeClass } from \"../base/WindowSizeClassContext\";\nimport { useWindowSize } from \"./use-window-size\";\nimport { useSurfaceScale } from \"./use-surface-scale\";\nimport { useSurfaceColor } from \"./use-surface-color\";\nexport var useStyles = function useStyles(factory, deps) {\n  var theme = useTheme();\n  var surfaceScale = useSurfaceScale();\n  var surfaceColor = useSurfaceColor();\n  var windowSizeClass = useWindowSizeClass();\n  var windowSize = useWindowSize();\n  var spacing = useSpacingFunc();\n  return useMemo(function () {\n    return factory(_objectSpread(_objectSpread({}, theme), {}, {\n      surfaceScale: surfaceScale,\n      surfaceColor: surfaceColor,\n      windowSizeClass: windowSizeClass,\n      windowSize: windowSize,\n      spacing: spacing\n    }));\n  }, [factory, theme, surfaceScale, surfaceColor, windowSizeClass, windowSize, spacing, deps]);\n};","map":{"version":3,"sources":["use-styles.ts"],"names":["useStyles","theme","useTheme","surfaceScale","useSurfaceScale","surfaceColor","useSurfaceColor","windowSizeClass","useWindowSizeClass","windowSize","useWindowSize","spacing","useSpacingFunc","useMemo","factory"],"mappings":";;;;;;AAAA,SAAA,OAAA,QAAA,OAAA;AAGA,SAAA,cAAA,QAAA,0BAAA;AACA,SAAA,QAAA;AACA,SAAA,kBAAA;AACA,SAAA,aAAA;AACA,SAAA,eAAA;AACA,SAAA,eAAA;AAIA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAA,OAAA,EAAA,IAAA,EAWjB;EACN,IAAMC,KAAK,GAAGC,QAAd,EAAA;EACA,IAAMC,YAAY,GAAGC,eAArB,EAAA;EACA,IAAMC,YAAY,GAAGC,eAArB,EAAA;EACA,IAAMC,eAAe,GAAGC,kBAAxB,EAAA;EACA,IAAMC,UAAU,GAAGC,aAAnB,EAAA;EACA,IAAMC,OAAO,GAAGC,cAAhB,EAAA;EAEA,OAAOC,OAAO,CACZ;IAAA,OAAMC,OAAO,iCAAC,KAAD;MAAaX,YAAZ,EAAYA,YAAb;MAA2BE,YAA1B,EAA0BA,YAA3B;MAAyCE,eAAxC,EAAwCA,eAAzC;MAA0DE,UAAzD,EAAyDA,UAA1D;MAAsEE,OAAAA,EAAAA;IAAtE,GAAb;EAAA,CADY,EAEZ,CAAA,OAAA,EAAA,KAAA,EAAA,YAAA,EAAA,YAAA,EAAA,eAAA,EAAA,UAAA,EAAA,OAAA,EAFF,IAEE,CAFY,CAAd;AAnBK,CAAA","sourcesContent":["import { DependencyList, useMemo } from 'react';\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native';\nimport type chroma from 'chroma-js';\nimport { SpacingFunc, useSpacingFunc } from 'react-native-flex-layout';\nimport { Theme, useTheme } from '../base/ThemeContext';\nimport { useWindowSizeClass, WindowSizeClass } from '../base/WindowSizeClassContext';\nimport { useWindowSize, WindowSize } from './use-window-size';\nimport { useSurfaceScale } from './use-surface-scale';\nimport { useSurfaceColor } from './use-surface-color';\n\ntype NamedStyles<T> = { [P in keyof T]: ViewStyle | TextStyle | ImageStyle };\n\nexport const useStyles = <T extends NamedStyles<T>>(\n  factory: (\n    utils: Theme & {\n      surfaceScale: chroma.Scale<chroma.Color>;\n      surfaceColor: chroma.Scale<chroma.Color>;\n      windowSizeClass: WindowSizeClass;\n      windowSize: WindowSize;\n      spacing: SpacingFunc;\n    }\n  ) => T,\n  deps?: DependencyList | undefined\n): T => {\n  const theme = useTheme();\n  const surfaceScale = useSurfaceScale();\n  const surfaceColor = useSurfaceColor();\n  const windowSizeClass = useWindowSizeClass();\n  const windowSize = useWindowSize();\n  const spacing = useSpacingFunc();\n\n  return useMemo(\n    () => factory({ ...theme, surfaceScale, surfaceColor, windowSizeClass, windowSize, spacing }),\n    [factory, theme, surfaceScale, surfaceColor, windowSizeClass, windowSize, spacing, deps]\n  );\n};\n"]},"metadata":{},"sourceType":"module"}