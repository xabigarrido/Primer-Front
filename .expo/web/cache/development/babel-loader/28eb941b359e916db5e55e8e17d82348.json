{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"spacing\", \"divider\", \"dividerStyle\", \"shouldWrapChildren\", \"childrenStyle\", \"children\"],\n    _excluded2 = [\"reverse\"],\n    _excluded3 = [\"reverse\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Flex from \"./Flex\";\nimport Selector, { notLastChild } from \"./Selector\";\nimport Divider from \"./Divider\";\nimport { useSpacing } from \"./SpacingFuncContext\";\nimport { getValidChildren } from \"./utilities\";\n\nvar Stack = function Stack(_ref) {\n  var _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 0 : _ref$spacing,\n      _ref$divider = _ref.divider,\n      divider = _ref$divider === void 0 ? false : _ref$divider,\n      dividerStyle = _ref.dividerStyle,\n      _ref$shouldWrapChildr = _ref.shouldWrapChildren,\n      shouldWrapChildren = _ref$shouldWrapChildr === void 0 ? false : _ref$shouldWrapChildr,\n      childrenStyle = _ref.childrenStyle,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var spacingValue = useSpacing(spacing);\n  var direction = useMemo(function () {\n    return rest.inline ? 'row' : rest.direction || 'column';\n  }, [rest.inline, rest.direction]);\n  var spacingStyle = useMemo(function () {\n    switch (direction) {\n      case 'column':\n        return {\n          marginBottom: spacingValue\n        };\n\n      case 'row':\n        return {\n          marginEnd: spacingValue\n        };\n\n      case 'column-reverse':\n        return {\n          marginTop: spacingValue\n        };\n\n      case 'row-reverse':\n        return {\n          marginStart: spacingValue\n        };\n    }\n  }, [spacingValue, direction]);\n  var shouldUseChildren = !shouldWrapChildren && !divider;\n  var validChildren = getValidChildren(children);\n  var clones = shouldUseChildren ? validChildren : validChildren.map(function (child, index) {\n    var key = typeof child.key !== 'undefined' ? child.key : index;\n    var isLast = index + 1 === validChildren.length;\n    var wrappedChild = React.createElement(StackItem, {\n      key: key\n    }, child);\n\n    var _child = shouldWrapChildren ? wrappedChild : child;\n\n    if (!divider) return _child;\n    var dividerElement = React.isValidElement(divider) ? divider : React.createElement(Divider, {\n      orientation: direction === 'row' || direction === 'row-reverse' ? 'vertical' : 'horizontal'\n    });\n    var clonedDivider = React.cloneElement(dividerElement, {\n      key: key + \"-divider\",\n      style: [dividerElement.props.style, dividerStyle]\n    });\n\n    var _divider = isLast ? null : clonedDivider;\n\n    return [_child, _divider];\n  });\n  return React.createElement(Flex, rest, React.createElement(Selector, {\n    childrenStyle: [notLastChild(spacingStyle), childrenStyle]\n  }, clones));\n};\n\nexport default Stack;\n\nvar StackItem = function StackItem(props) {\n  return React.createElement(View, props);\n};\n\nexport var HStack = function HStack(_ref2) {\n  var reverse = _ref2.reverse,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  return React.createElement(Stack, _extends({}, rest, {\n    direction: reverse ? 'row-reverse' : 'row'\n  }));\n};\nexport var VStack = function VStack(_ref3) {\n  var reverse = _ref3.reverse,\n      rest = _objectWithoutProperties(_ref3, _excluded3);\n\n  return React.createElement(Stack, _extends({}, rest, {\n    direction: reverse ? 'column-reverse' : 'column'\n  }));\n};","map":{"version":3,"sources":["Stack.tsx"],"names":["Stack","spacing","divider","shouldWrapChildren","rest","spacingValue","useSpacing","direction","useMemo","spacingStyle","marginBottom","marginEnd","marginTop","marginStart","shouldUseChildren","validChildren","getValidChildren","clones","key","child","isLast","index","wrappedChild","_child","dividerElement","clonedDivider","style","_divider","notLastChild","StackItem","props","HStack","reverse","VStack"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport type { FlexProps } from './Flex';\nimport Flex from './Flex';\nimport type { SelectorProps } from './Selector';\nimport Selector, { notLastChild } from './Selector';\nimport Divider from './Divider';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nexport interface StackProps extends FlexProps, SelectorProps {\n  /**\n   * The spacing between items in the stack.\n   *\n   * @default 0\n   */\n  spacing?: number;\n\n  /**\n   * If `true`, each stack item will show a divider.\n   *\n   * @default false\n   */\n  divider?: React.ReactElement;\n\n  /**\n   * A style object to apply to each divider.\n   */\n  dividerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * If `true`, the children will be wrapped in a `Box` and the `Box` will take the spacing properties.\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean;\n}\n\nconst Stack: React.FC<StackProps> = ({\n  spacing = 0,\n  divider = false,\n  dividerStyle,\n  shouldWrapChildren = false,\n  childrenStyle,\n  children,\n  ...rest\n}) => {\n  const spacingValue = useSpacing(spacing);\n\n  const direction = useMemo(() => {\n    return rest.inline ? 'row' : rest.direction || 'column';\n  }, [rest.inline, rest.direction]);\n\n  const spacingStyle = useMemo(() => {\n    switch (direction) {\n      case 'column':\n        return { marginBottom: spacingValue };\n      case 'row':\n        return { marginEnd: spacingValue };\n      case 'column-reverse':\n        return { marginTop: spacingValue };\n      case 'row-reverse':\n        return { marginStart: spacingValue };\n    }\n  }, [spacingValue, direction]);\n\n  const shouldUseChildren = !shouldWrapChildren && !divider;\n\n  const validChildren = getValidChildren(children);\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const key = typeof child.key !== 'undefined' ? child.key : index;\n        const isLast = index + 1 === validChildren.length;\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>;\n        const _child = shouldWrapChildren ? wrappedChild : child;\n\n        if (!divider) return _child;\n\n        const dividerElement = React.isValidElement(divider) ? (\n          divider\n        ) : (\n          <Divider\n            orientation={\n              direction === 'row' || direction === 'row-reverse'\n                ? 'vertical'\n                : 'horizontal'\n            }\n          />\n        );\n\n        const clonedDivider = React.cloneElement(dividerElement, {\n          key: `${key}-divider`,\n          style: [dividerElement.props.style, dividerStyle],\n        });\n\n        const _divider = isLast ? null : clonedDivider;\n\n        return [_child, _divider];\n      });\n\n  return (\n    <Flex {...rest}>\n      <Selector childrenStyle={[notLastChild(spacingStyle), childrenStyle]}>\n        {clones}\n      </Selector>\n    </Flex>\n  );\n};\n\nexport default Stack;\n\nconst StackItem: React.FC = (props) => <View {...props} />;\n\nexport interface HStackProps extends Omit<StackProps, 'inline' | 'direction'> {\n  reverse?: boolean;\n}\n\nexport const HStack: React.FC<HStackProps> = ({ reverse, ...rest }) => {\n  return <Stack {...rest} direction={reverse ? 'row-reverse' : 'row'} />;\n};\n\nexport interface VStackProps extends Omit<StackProps, 'inline' | 'direction'> {\n  reverse?: boolean;\n}\n\nexport const VStack: React.FC<VStackProps> = ({ reverse, ...rest }) => {\n  return <Stack {...rest} direction={reverse ? 'column-reverse' : 'column'} />;\n};\n"]},"metadata":{},"sourceType":"module"}