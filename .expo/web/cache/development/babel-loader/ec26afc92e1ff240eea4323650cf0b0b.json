{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar lastSetBadgeCount = 0;\nvar badgeModule = {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getBadgeCountAsync: function () {\n    var _getBadgeCountAsync = _asyncToGenerator(function* () {\n      return lastSetBadgeCount;\n    });\n\n    function getBadgeCountAsync() {\n      return _getBadgeCountAsync.apply(this, arguments);\n    }\n\n    return getBadgeCountAsync;\n  }(),\n  setBadgeCountAsync: function () {\n    var _setBadgeCountAsync = _asyncToGenerator(function* (badgeCount, options) {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n\n      var badgin = require('badgin');\n\n      if (badgeCount > 0) {\n        badgin.set(badgeCount, options);\n      } else {\n        badgin.clear();\n      }\n\n      lastSetBadgeCount = badgeCount;\n      return true;\n    });\n\n    function setBadgeCountAsync(_x, _x2) {\n      return _setBadgeCountAsync.apply(this, arguments);\n    }\n\n    return setBadgeCountAsync;\n  }()\n};\nexport default badgeModule;","map":{"version":3,"sources":["../src/BadgeModule.web.ts"],"names":[],"mappings":";AAEA,IAAI,iBAAiB,GAAG,CAAxB;AAEA,IAAM,WAAW,GAAgB;EAC/B,WAAW,EAAE,uBAAK,CAAG,CADU;EAE/B,eAAe,EAAE,2BAAK,CAAG,CAFM;EAG/B,kBAAkB;IAAA,4CAAE,aAAW;MAC7B,OAAO,iBAAP;IACD,CAFiB;;IAAA;MAAA;IAAA;;IAAA;EAAA,GAHa;EAM/B,kBAAkB;IAAA,4CAAE,WAAO,UAAP,EAAmB,OAAnB,EAA8B;MAGhD,IAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;QACjC,OAAO,KAAP;MACD;;MACD,IAAM,MAAM,GAAG,OAAO,CAAC,QAAD,CAAtB;;MACA,IAAI,UAAU,GAAG,CAAjB,EAAoB;QAClB,MAAM,CAAC,GAAP,CAAW,UAAX,EAAuB,OAAvB;MACD,CAFD,MAEO;QACL,MAAM,CAAC,KAAP;MACD;;MACD,iBAAiB,GAAG,UAApB;MACA,OAAO,IAAP;IACD,CAdiB;;IAAA;MAAA;IAAA;;IAAA;EAAA;AANa,CAAjC;AAuBA,eAAe,WAAf","sourcesContent":["import { BadgeModule } from './BadgeModule.types';\n\nlet lastSetBadgeCount = 0;\n\nconst badgeModule: BadgeModule = {\n  addListener: () => {},\n  removeListeners: () => {},\n  getBadgeCountAsync: async () => {\n    return lastSetBadgeCount;\n  },\n  setBadgeCountAsync: async (badgeCount, options) => {\n    // If this module is loaded in SSR (NextJS), we can't modify the badge.\n    // It also can't load the badgin module, that instantly invokes methods on window.\n    if (typeof window === 'undefined') {\n      return false;\n    }\n    const badgin = require('badgin');\n    if (badgeCount > 0) {\n      badgin.set(badgeCount, options);\n    } else {\n      badgin.clear();\n    }\n    lastSetBadgeCount = badgeCount;\n    return true;\n  },\n};\n\nexport default badgeModule;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}