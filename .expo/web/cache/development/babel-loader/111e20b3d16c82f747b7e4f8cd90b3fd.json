{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"color\", \"style\", \"contentContainerStyle\", \"pressEffect\", \"pressEffectColor\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"onBlur\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"delayLongPress\", \"disabled\", \"hitSlop\", \"pressRetentionOffset\", \"android_disableSound\", \"android_ripple\", \"testOnly_pressed\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"./Pressable\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nvar styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    borderRadius: 48 / 2,\n    overflow: 'hidden'\n  },\n  contentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'on-background' : _ref$color,\n      style = _ref.style,\n      contentContainerStyle = _ref.contentContainerStyle,\n      pressEffect = _ref.pressEffect,\n      pressEffectColor = _ref.pressEffectColor,\n      onPress = _ref.onPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      onLongPress = _ref.onLongPress,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      delayLongPress = _ref.delayLongPress,\n      disabled = _ref.disabled,\n      hitSlop = _ref.hitSlop,\n      pressRetentionOffset = _ref.pressRetentionOffset,\n      android_disableSound = _ref.android_disableSound,\n      android_ripple = _ref.android_ripple,\n      testOnly_pressed = _ref.testOnly_pressed,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var palette = usePaletteColor(color);\n  return React.createElement(View, _extends({\n    style: [styles.container, style]\n  }, rest), React.createElement(Pressable, {\n    style: [StyleSheet.absoluteFill, styles.contentContainer, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : palette.main,\n    onPress: onPress,\n    onPressIn: onPressIn,\n    onPressOut: onPressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, icon ? typeof icon === 'function' ? icon({\n    color: palette.main,\n    size: 24\n  }) : icon : null));\n};\n\nexport default IconButton;","map":{"version":3,"sources":["IconButton.tsx"],"names":["styles","container","width","height","borderRadius","overflow","contentContainer","justifyContent","alignItems","IconButton","color","rest","palette","usePaletteColor","StyleSheet","pressEffectColor","testOnly_pressed","icon","size"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\n\nexport interface IconButtonProps extends Omit<ViewProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The element to render as the icon.\n   */\n  icon?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The color of the icon and the press effect.\n   *\n   * @default \"on-background\"\n   */\n  color?: Color;\n\n  /**\n   * The style of the icon's container view.\n   */\n  contentContainerStyle?: PressableProps['style'];\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: 48,\n    height: 48,\n    borderRadius: 48 / 2,\n    overflow: 'hidden',\n  },\n  contentContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nconst IconButton: React.FC<IconButtonProps> = ({\n  icon,\n  color = 'on-background',\n  style,\n  contentContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n  ...rest\n}) => {\n  const palette = usePaletteColor(color);\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      <Pressable\n        style={[StyleSheet.absoluteFill, styles.contentContainer, contentContainerStyle]}\n        pressEffect={pressEffect}\n        pressEffectColor={pressEffectColor ?? palette.main}\n        onPress={onPress}\n        onPressIn={onPressIn}\n        onPressOut={onPressOut}\n        onLongPress={onLongPress}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n        delayLongPress={delayLongPress}\n        disabled={disabled}\n        hitSlop={hitSlop}\n        pressRetentionOffset={pressRetentionOffset}\n        android_disableSound={android_disableSound}\n        android_ripple={android_ripple}\n        testOnly_pressed={testOnly_pressed}\n      >\n        {icon ? (typeof icon === 'function' ? icon({ color: palette.main, size: 24 }) : icon) : null}\n      </Pressable>\n    </View>\n  );\n};\n\nexport default IconButton;\n"]},"metadata":{},"sourceType":"module"}