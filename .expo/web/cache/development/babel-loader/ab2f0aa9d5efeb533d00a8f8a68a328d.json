{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"spacing\", \"shouldWrapChildren\", \"childrenStyle\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Flex from \"./Flex\";\nimport Selector from \"./Selector\";\nimport { useSpacing } from \"./SpacingFuncContext\";\nimport { getValidChildren } from \"./utilities\";\n\nvar Wrap = function Wrap(_ref) {\n  var _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? 0 : _ref$spacing,\n      _ref$shouldWrapChildr = _ref.shouldWrapChildren,\n      shouldWrapChildren = _ref$shouldWrapChildr === void 0 ? false : _ref$shouldWrapChildr,\n      childrenStyle = _ref.childrenStyle,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var spacingValue = useSpacing(spacing);\n  var validChildren = getValidChildren(children);\n  var clones = !shouldWrapChildren ? validChildren : validChildren.map(function (child, index) {\n    var key = typeof child.key !== 'undefined' ? child.key : index;\n    return React.createElement(WrapItem, {\n      key: key\n    }, child);\n  });\n  return React.createElement(Flex, _extends({\n    mt: -spacing,\n    ms: -spacing,\n    inline: true,\n    wrap: true\n  }, rest), React.createElement(Selector, {\n    childrenStyle: [{\n      marginTop: spacingValue,\n      marginStart: spacingValue\n    }, childrenStyle]\n  }, clones));\n};\n\nexport default Wrap;\n\nvar WrapItem = function WrapItem(props) {\n  return React.createElement(View, props);\n};","map":{"version":3,"sources":["Wrap.tsx"],"names":["Wrap","spacing","shouldWrapChildren","rest","spacingValue","useSpacing","validChildren","getValidChildren","clones","key","child","marginTop","marginStart","WrapItem","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;AAGA,OAAA,IAAA;AAEA,OAAA,QAAA;AACA,SAAA,UAAA;AACA,SAAA,gBAAA;;AAkBA,IAAMA,IAAyB,GAAG,SAA5BA,IAA4B,CAAA,IAAA,EAM5B;EAN6B,mBAM7B,IAN6B,CACjCC,OADiC;EAAA,IACjCA,OADiC,6BAAA,CAAA;EAAA,4BAM7B,IAN6B,CAEjCC,kBAFiC;EAAA,IAEjCA,kBAFiC,sCAAA,KAAA;EAAA,IAAA,aAAA,GAM7B,IAN6B,CAAA,aAAA;EAAA,IAAA,QAAA,GAM7B,IAN6B,CAAA,QAAA;EAAA,IAK9BC,IAL8B,4BAM7B,IAN6B;;EAOjC,IAAMC,YAAY,GAAGC,UAAU,CAA/B,OAA+B,CAA/B;EAEA,IAAMC,aAAa,GAAGC,gBAAgB,CAAtC,QAAsC,CAAtC;EAEA,IAAMC,MAAM,GAAG,CAAA,kBAAA,GAAA,aAAA,GAEX,aAAa,CAAb,GAAA,CAAkB,UAAA,KAAA,EAAA,KAAA,EAAkB;IAClC,IAAMC,GAAG,GAAG,OAAOC,KAAK,CAAZ,GAAA,KAAA,WAAA,GAAmCA,KAAK,CAAxC,GAAA,GAAZ,KAAA;IACA,OAAO,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;MAAU,GAAG,EAAED;IAAf,CAAA,EAAP,KAAO,CAAP;EAJN,CAEI,CAFJ;EAOA,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;IAAM,EAAE,EAAE,CAAV,OAAA;IAAoB,EAAE,EAAE,CAAxB,OAAA;IAAkC,MAAM,EAAxC,IAAA;IAAyC,IAAI,EAAA;EAA7C,CAAA,EAAA,IAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IACE,aAAa,EAAE,CACb;MAAEE,SAAS,EAAX,YAAA;MAA2BC,WAAW,EAAER;IAAxC,CADa,EAAA,aAAA;EADjB,CAAA,EAFJ,MAEI,CADF,CADF;AAlBF,CAAA;;AAgCA,eAAA,IAAA;;AAEA,IAAMS,QAAkB,GAAIC,SAAtBD,QAAsBC,CAAAA,KAAD;EAAA,OAAW,KAAA,CAAA,aAAA,CAAA,IAAA,EAAtC,KAAsC,CAAX;AAAA,CAA3B","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport type { FlexProps } from './Flex';\nimport Flex from './Flex';\nimport type { SelectorProps } from './Selector';\nimport Selector from './Selector';\nimport { useSpacing } from './SpacingFuncContext';\nimport { getValidChildren } from './utilities';\n\nexport interface WrapProps extends FlexProps, SelectorProps {\n  /**\n   * The space between each child (even if it wraps).\n   *\n   * @default 0\n   */\n  spacing?: number;\n\n  /**\n   * If `true`, the children will be wrapped in a `Box` and the `Box` will take the spacing properties.\n   *\n   * @default false\n   */\n  shouldWrapChildren?: boolean;\n}\n\nconst Wrap: React.FC<WrapProps> = ({\n  spacing = 0,\n  shouldWrapChildren = false,\n  childrenStyle,\n  children,\n  ...rest\n}) => {\n  const spacingValue = useSpacing(spacing);\n\n  const validChildren = getValidChildren(children);\n\n  const clones = !shouldWrapChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const key = typeof child.key !== 'undefined' ? child.key : index;\n        return <WrapItem key={key}>{child}</WrapItem>;\n      });\n\n  return (\n    <Flex mt={-spacing} ms={-spacing} inline wrap {...rest}>\n      <Selector\n        childrenStyle={[\n          { marginTop: spacingValue, marginStart: spacingValue },\n          childrenStyle,\n        ]}\n      >\n        {clones}\n      </Selector>\n    </Flex>\n  );\n};\n\nexport default Wrap;\n\nconst WrapItem: React.FC = (props) => <View {...props} />;\n"]},"metadata":{},"sourceType":"module"}