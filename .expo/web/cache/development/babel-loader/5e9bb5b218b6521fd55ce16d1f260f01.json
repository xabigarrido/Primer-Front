{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"title\", \"leading\", \"trailing\", \"variant\", \"color\", \"tintColor\", \"compact\", \"disableElevation\", \"uppercase\", \"loading\", \"loadingIndicatorPosition\", \"loadingIndicator\", \"style\", \"pressableContainerStyle\", \"contentContainerStyle\", \"titleStyle\", \"leadingContainerStyle\", \"trailingContainerStyle\", \"loadingOverlayContainerStyle\", \"pressEffect\", \"pressEffectColor\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"onBlur\", \"onFocus\", \"onMouseEnter\", \"onMouseLeave\", \"delayLongPress\", \"disabled\", \"hitSlop\", \"pressRetentionOffset\", \"android_disableSound\", \"android_ripple\", \"testOnly_pressed\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Surface from \"./Surface\";\nimport Text from \"./Text\";\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Pressable from \"./Pressable\";\nimport { usePaletteColor } from \"./hooks/use-palette-color\";\nimport { useSurfaceScale } from \"./hooks/use-surface-scale\";\nimport { useStyles } from \"./hooks/use-styles\";\nimport { useAnimatedElevation } from \"./hooks/use-animated-elevation\";\n\nvar Button = function Button(_ref) {\n  var title = _ref.title,\n      leading = _ref.leading,\n      trailing = _ref.trailing,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'contained' : _ref$variant,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'primary' : _ref$color,\n      tintColor = _ref.tintColor,\n      _ref$compact = _ref.compact,\n      compact = _ref$compact === void 0 ? false : _ref$compact,\n      _ref$disableElevation = _ref.disableElevation,\n      disableElevation = _ref$disableElevation === void 0 ? false : _ref$disableElevation,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      _ref$loading = _ref.loading,\n      loading = _ref$loading === void 0 ? false : _ref$loading,\n      _ref$loadingIndicator = _ref.loadingIndicatorPosition,\n      loadingIndicatorPosition = _ref$loadingIndicator === void 0 ? 'leading' : _ref$loadingIndicator,\n      loadingIndicator = _ref.loadingIndicator,\n      style = _ref.style,\n      pressableContainerStyle = _ref.pressableContainerStyle,\n      contentContainerStyle = _ref.contentContainerStyle,\n      titleStyle = _ref.titleStyle,\n      leadingContainerStyle = _ref.leadingContainerStyle,\n      trailingContainerStyle = _ref.trailingContainerStyle,\n      loadingOverlayContainerStyle = _ref.loadingOverlayContainerStyle,\n      pressEffect = _ref.pressEffect,\n      pressEffectColor = _ref.pressEffectColor,\n      onPress = _ref.onPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      onLongPress = _ref.onLongPress,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseLeave = _ref.onMouseLeave,\n      delayLongPress = _ref.delayLongPress,\n      disabled = _ref.disabled,\n      hitSlop = _ref.hitSlop,\n      pressRetentionOffset = _ref.pressRetentionOffset,\n      android_disableSound = _ref.android_disableSound,\n      android_ripple = _ref.android_ripple,\n      testOnly_pressed = _ref.testOnly_pressed,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var surfaceScale = useSurfaceScale();\n  var p = usePaletteColor(disabled ? surfaceScale(0.12).hex() : color, disabled ? surfaceScale(0.35).hex() : tintColor);\n  var contentColor = useMemo(function () {\n    return variant === 'contained' ? p.on : disabled ? p.on : p.main;\n  }, [variant, p, disabled]);\n  var hasLeading = useMemo(function () {\n    return !!leading || loading && loadingIndicatorPosition === 'leading';\n  }, [leading, loading, loadingIndicatorPosition]);\n  var hasTrailing = useMemo(function () {\n    return !!trailing || loading && loadingIndicatorPosition === 'trailing';\n  }, [trailing, loading, loadingIndicatorPosition]);\n  var styles = useStyles(function (_ref2) {\n    var shapes = _ref2.shapes;\n    return {\n      container: {\n        backgroundColor: variant === 'contained' ? p.main : 'transparent'\n      },\n      outline: _objectSpread(_objectSpread({}, shapes.small), {}, {\n        borderWidth: 1,\n        borderColor: surfaceScale(0.12).hex()\n      }),\n      pressableContainer: _objectSpread(_objectSpread({}, shapes.small), {}, {\n        overflow: 'hidden'\n      }),\n      pressable: {\n        minWidth: 64,\n        height: 36,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingStart: hasLeading ? compact ? 6 : 12 : compact ? 8 : 16,\n        paddingEnd: hasTrailing ? compact ? 6 : 12 : compact ? 8 : 16\n      },\n      titleStyle: {\n        textTransform: uppercase ? 'uppercase' : 'none',\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      leadingContainer: {\n        marginEnd: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      trailingContainer: {\n        marginStart: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1\n      },\n      loadingOverlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n        justifyContent: 'center',\n        alignItems: 'center'\n      })\n    };\n  }, [variant, uppercase, compact, loading, loadingIndicatorPosition, p, hasLeading, hasTrailing, surfaceScale]);\n\n  var getTitle = function getTitle() {\n    switch (typeof title) {\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"button\",\n          selectable: false,\n          style: [{\n            color: contentColor\n          }, styles.titleStyle, titleStyle]\n        }, title);\n\n      case 'function':\n        return title({\n          color: contentColor\n        });\n\n      default:\n        return title;\n    }\n  };\n\n  var getLoadingIndicator = function getLoadingIndicator() {\n    if (!loadingIndicator) return React.createElement(ActivityIndicator, {\n      color: contentColor\n    });\n\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return React.createElement(Text, {\n          variant: \"button\",\n          style: {\n            color: contentColor\n          }\n        }, loadingIndicator);\n\n      case 'function':\n        return loadingIndicator({\n          color: contentColor\n        });\n\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  var getLeading = function getLeading() {\n    if (loading && loadingIndicatorPosition === 'leading') return getLoadingIndicator();\n    return typeof leading === 'function' ? leading({\n      color: contentColor,\n      size: 18\n    }) : leading;\n  };\n\n  var getTrailing = function getTrailing() {\n    if (loading && loadingIndicatorPosition === 'trailing') return getLoadingIndicator();\n    return typeof trailing === 'function' ? trailing({\n      color: contentColor,\n      size: 18\n    }) : trailing;\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hovered = _useState2[0],\n      setHovered = _useState2[1];\n\n  var handleMouseEnter = useCallback(function (event) {\n    onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);\n    setHovered(true);\n  }, [onMouseEnter]);\n  var handleMouseLeave = useCallback(function (event) {\n    onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event);\n    setHovered(false);\n  }, [onMouseLeave]);\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pressed = _useState4[0],\n      setPressed = _useState4[1];\n\n  var handlePressIn = useCallback(function (event) {\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(event);\n    setPressed(true);\n  }, [onPressIn]);\n  var handlePressOut = useCallback(function (event) {\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(event);\n    setPressed(false);\n  }, [onPressOut]);\n  var animatedElevation = useAnimatedElevation(variant === 'contained' && !disableElevation && !disabled ? pressed ? 8 : hovered ? 4 : 2 : 0);\n  return React.createElement(Surface, _extends({\n    category: \"small\",\n    style: [animatedElevation, styles.container, style]\n  }, rest), React.createElement(View, {\n    style: [styles.pressableContainer, pressableContainerStyle]\n  }, React.createElement(Pressable, {\n    style: [styles.pressable, contentContainerStyle],\n    pressEffect: pressEffect,\n    pressEffectColor: pressEffectColor !== null && pressEffectColor !== void 0 ? pressEffectColor : contentColor,\n    onPress: onPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    onLongPress: onLongPress,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    delayLongPress: delayLongPress,\n    disabled: disabled,\n    hitSlop: hitSlop,\n    pressRetentionOffset: pressRetentionOffset,\n    android_disableSound: android_disableSound,\n    android_ripple: android_ripple,\n    testOnly_pressed: testOnly_pressed\n  }, hasLeading && React.createElement(View, {\n    style: [styles.leadingContainer, leadingContainerStyle]\n  }, getLeading()), getTitle(), hasTrailing && React.createElement(View, {\n    style: [styles.trailingContainer, trailingContainerStyle]\n  }, getTrailing()), loading && loadingIndicatorPosition === 'overlay' && React.createElement(View, {\n    style: [styles.loadingOverlayContainer, loadingOverlayContainerStyle]\n  }, getLoadingIndicator()))), variant === 'outlined' && React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.outline],\n    pointerEvents: \"none\"\n  }));\n};\n\nexport default Button;","map":{"version":3,"sources":["Button.tsx"],"names":["Button","variant","color","compact","disableElevation","uppercase","loading","loadingIndicatorPosition","rest","surfaceScale","useSurfaceScale","p","usePaletteColor","disabled","contentColor","useMemo","hasLeading","hasTrailing","styles","useStyles","shapes","container","backgroundColor","outline","borderWidth","borderColor","pressableContainer","overflow","pressable","minWidth","height","flexDirection","justifyContent","alignItems","paddingStart","paddingEnd","titleStyle","textTransform","opacity","leadingContainer","marginEnd","trailingContainer","marginStart","loadingOverlayContainer","StyleSheet","getTitle","title","getLoadingIndicator","loadingIndicator","getLeading","leading","size","getTrailing","trailing","useState","handleMouseEnter","useCallback","event","onMouseEnter","setHovered","handleMouseLeave","onMouseLeave","handlePressIn","onPressIn","setPressed","handlePressOut","onPressOut","animatedElevation","useAnimatedElevation","pressed","hovered","pressEffectColor","testOnly_pressed"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TargetedEvent,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Surface, { SurfaceProps } from './Surface';\nimport Text from './Text';\nimport ActivityIndicator from './ActivityIndicator';\nimport Pressable, { PressableProps } from './Pressable';\nimport { Color, usePaletteColor } from './hooks/use-palette-color';\nimport { useSurfaceScale } from './hooks/use-surface-scale';\nimport { useStyles } from './hooks/use-styles';\nimport { useAnimatedElevation } from './hooks/use-animated-elevation';\n\nexport interface ButtonProps extends Omit<SurfaceProps, 'hitSlop'>, Omit<PressableProps, 'style' | 'children'> {\n  /**\n   * The text content of the button.\n   */\n  title: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed before the `title`.\n   */\n  leading?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The element placed after the `title`.\n   */\n  trailing?: React.ReactNode | ((props: { color: string; size: number }) => React.ReactNode | null) | null;\n\n  /**\n   * The style of the button.\n   * - `text`: Text buttons are typically used for less important actions (low emphasis).\n   * - `outlined`: Outlined buttons are used for more emphasis than text buttons due to the stroke (medium emphasis).\n   * - `contained`: Contained buttons have more emphasis, as they use a color fill and shadow (high emphasis).\n   *\n   * @default \"contained\"\n   */\n  variant?: 'text' | 'outlined' | 'contained';\n\n  /**\n   * The main color of the button.\n   * for `contained` buttons, this is the background color.\n   * for `outlined` and `text` buttons, this is the color of the content (text, icons, etc.).\n   *\n   * @default \"primary\"\n   */\n  color?: Color;\n\n  /**\n   * The color of the `contained` buttons content (text, icons, etc.). No effect on `outlined` and `text` buttons.\n   */\n  tintColor?: Color;\n\n  /**\n   * Smaller horizontal padding, useful for `text` buttons in a row.\n   *\n   * @default false\n   */\n  compact?: boolean;\n\n  /**\n   * If `true`, no shadow is used. No effect on `outlined` and `text` buttons.\n   *\n   * @default false\n   */\n  disableElevation?: boolean;\n\n  /**\n   * If `false`, the button title is not rendered in upper case. No effect if you pass a React.Node as the `title` prop.\n   *\n   * @default true\n   */\n  uppercase?: boolean;\n\n  /**\n   * Whether to show a loading indicator.\n   *\n   * @default false\n   */\n  loading?: boolean;\n\n  /**\n   * The place where the loading indicator should appear.\n   * - `leading`: The indicator will replace the `leading` element.\n   * - `trailing`: The indicator will replace the `trailing` element.\n   * - `overlay`: The indicator will be added as an overlay over the button.\n   *\n   * @default \"leading\"\n   */\n  loadingIndicatorPosition?: 'leading' | 'trailing' | 'overlay';\n\n  /**\n   * A React.Node to replace the default loading indicator. Also, you can pass a string to show a text (e.g. \"Loading...\").\n   */\n  loadingIndicator?: string | React.ReactNode | ((props: { color: string }) => React.ReactNode | null) | null;\n\n  /**\n   * The style of the button's pressable component container.\n   */\n  pressableContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's container.\n   */\n  contentContainerStyle?: PressableProps['style'];\n\n  /**\n   * The style of the button's text. No effect if you pass a React.Node as the `title` prop.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n\n  /**\n   * The style of the button's leading element container.\n   */\n  leadingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's trailing element container.\n   */\n  trailingContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * The style of the button's loading indicator overlay view. No effect if `loadingIndicatorPosition` is not `overlay`.\n   */\n  loadingOverlayContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  title,\n  leading,\n  trailing,\n  variant = 'contained',\n  color = 'primary',\n  tintColor,\n  compact = false,\n  disableElevation = false,\n  uppercase = true,\n  loading = false,\n  loadingIndicatorPosition = 'leading',\n  loadingIndicator,\n\n  style,\n  pressableContainerStyle,\n  contentContainerStyle,\n  titleStyle,\n  leadingContainerStyle,\n  trailingContainerStyle,\n  loadingOverlayContainerStyle,\n\n  pressEffect,\n  pressEffectColor,\n  onPress,\n  onPressIn,\n  onPressOut,\n  onLongPress,\n  onBlur,\n  onFocus,\n  onMouseEnter,\n  onMouseLeave,\n  delayLongPress,\n  disabled,\n  hitSlop,\n  pressRetentionOffset,\n  android_disableSound,\n  android_ripple,\n  testOnly_pressed,\n\n  ...rest\n}) => {\n  const surfaceScale = useSurfaceScale();\n\n  const p = usePaletteColor(\n    disabled ? surfaceScale(0.12).hex() : color,\n    disabled ? surfaceScale(0.35).hex() : tintColor\n  );\n\n  const contentColor = useMemo(\n    () => (variant === 'contained' ? p.on : disabled ? p.on : p.main),\n    [variant, p, disabled]\n  );\n\n  const hasLeading = useMemo(\n    () => !!leading || (loading && loadingIndicatorPosition === 'leading'),\n    [leading, loading, loadingIndicatorPosition]\n  );\n\n  const hasTrailing = useMemo(\n    () => !!trailing || (loading && loadingIndicatorPosition === 'trailing'),\n    [trailing, loading, loadingIndicatorPosition]\n  );\n\n  const styles = useStyles(\n    ({ shapes }) => ({\n      container: {\n        backgroundColor: variant === 'contained' ? p.main : 'transparent',\n      },\n      outline: {\n        ...shapes.small,\n        borderWidth: 1,\n        borderColor: surfaceScale(0.12).hex(),\n      },\n      pressableContainer: {\n        ...shapes.small,\n        overflow: 'hidden',\n      },\n      pressable: {\n        minWidth: 64,\n        height: 36,\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        paddingStart: hasLeading ? (compact ? 6 : 12) : compact ? 8 : 16,\n        paddingEnd: hasTrailing ? (compact ? 6 : 12) : compact ? 8 : 16,\n      },\n      titleStyle: {\n        textTransform: uppercase ? 'uppercase' : 'none',\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      leadingContainer: {\n        marginEnd: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      trailingContainer: {\n        marginStart: compact ? 6 : 8,\n        opacity: loading && loadingIndicatorPosition === 'overlay' ? 0 : 1,\n      },\n      loadingOverlayContainer: {\n        ...StyleSheet.absoluteFillObject,\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }),\n    [variant, uppercase, compact, loading, loadingIndicatorPosition, p, hasLeading, hasTrailing, surfaceScale]\n  );\n\n  const getTitle = () => {\n    switch (typeof title) {\n      case 'string':\n        return (\n          <Text variant=\"button\" selectable={false} style={[{ color: contentColor }, styles.titleStyle, titleStyle]}>\n            {title}\n          </Text>\n        );\n      case 'function':\n        return title({ color: contentColor });\n      default:\n        return title;\n    }\n  };\n\n  const getLoadingIndicator = () => {\n    if (!loadingIndicator) return <ActivityIndicator color={contentColor} />;\n    switch (typeof loadingIndicator) {\n      case 'string':\n        return (\n          <Text variant=\"button\" style={{ color: contentColor }}>\n            {loadingIndicator}\n          </Text>\n        );\n      case 'function':\n        return loadingIndicator({ color: contentColor });\n      default:\n        return loadingIndicator;\n    }\n  };\n\n  const getLeading = () => {\n    if (loading && loadingIndicatorPosition === 'leading') return getLoadingIndicator();\n    return typeof leading === 'function' ? leading({ color: contentColor, size: 18 }) : leading;\n  };\n\n  const getTrailing = () => {\n    if (loading && loadingIndicatorPosition === 'trailing') return getLoadingIndicator();\n    return typeof trailing === 'function' ? trailing({ color: contentColor, size: 18 }) : trailing;\n  };\n\n  const [hovered, setHovered] = useState(false);\n\n  const handleMouseEnter = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      onMouseEnter?.(event);\n      setHovered(true);\n    },\n    [onMouseEnter]\n  );\n\n  const handleMouseLeave = useCallback(\n    (event: NativeSyntheticEvent<TargetedEvent>) => {\n      onMouseLeave?.(event);\n      setHovered(false);\n    },\n    [onMouseLeave]\n  );\n\n  const [pressed, setPressed] = useState(false);\n\n  const handlePressIn = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressIn?.(event);\n      setPressed(true);\n    },\n    [onPressIn]\n  );\n\n  const handlePressOut = useCallback(\n    (event: GestureResponderEvent) => {\n      onPressOut?.(event);\n      setPressed(false);\n    },\n    [onPressOut]\n  );\n\n  const animatedElevation = useAnimatedElevation(\n    variant === 'contained' && !disableElevation && !disabled ? (pressed ? 8 : hovered ? 4 : 2) : 0\n  );\n\n  return (\n    <Surface category=\"small\" style={[animatedElevation, styles.container, style]} {...rest}>\n      <View style={[styles.pressableContainer, pressableContainerStyle]}>\n        <Pressable\n          style={[styles.pressable, contentContainerStyle]}\n          pressEffect={pressEffect}\n          pressEffectColor={pressEffectColor ?? contentColor}\n          onPress={onPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onLongPress={onLongPress}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          delayLongPress={delayLongPress}\n          disabled={disabled}\n          hitSlop={hitSlop}\n          pressRetentionOffset={pressRetentionOffset}\n          android_disableSound={android_disableSound}\n          android_ripple={android_ripple}\n          testOnly_pressed={testOnly_pressed}\n        >\n          {hasLeading && <View style={[styles.leadingContainer, leadingContainerStyle]}>{getLeading()}</View>}\n          {getTitle()}\n          {hasTrailing && <View style={[styles.trailingContainer, trailingContainerStyle]}>{getTrailing()}</View>}\n\n          {loading && loadingIndicatorPosition === 'overlay' && (\n            <View style={[styles.loadingOverlayContainer, loadingOverlayContainerStyle]}>{getLoadingIndicator()}</View>\n          )}\n        </Pressable>\n      </View>\n      {variant === 'outlined' && <View style={[StyleSheet.absoluteFill, styles.outline]} pointerEvents=\"none\" />}\n    </Surface>\n  );\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}