{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\nimport { DeviceType } from \"./Device.types\";\nvar result = null;\n\nif (Platform.isDOMAvailable) {\n  var parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nfunction convertGiBtoBytes(gib) {\n  return Math.round(gib * Math.pow(1024, 3));\n}\n\nexport default {\n  get isDevice() {\n    return true;\n  },\n\n  get brand() {\n    return null;\n  },\n\n  get manufacturer() {\n    return result && result.device.vendor || null;\n  },\n\n  get modelName() {\n    return result && result.device.model || null;\n  },\n\n  get deviceYearClass() {\n    return null;\n  },\n\n  get totalMemory() {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      var _navigator = navigator,\n          deviceMemory = _navigator.deviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n\n    return null;\n  },\n\n  get supportedCpuArchitectures() {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n\n  get osName() {\n    return result && result.os.name || '';\n  },\n\n  get osVersion() {\n    return result && result.os.version || '';\n  },\n\n  get osBuildId() {\n    return null;\n  },\n\n  get osInternalBuildId() {\n    return null;\n  },\n\n  get deviceName() {\n    return null;\n  },\n\n  getDeviceTypeAsync: function () {\n    var _getDeviceTypeAsync = _asyncToGenerator(function* () {\n      switch (result.device.type) {\n        case 'mobile':\n          return DeviceType.PHONE;\n\n        case 'tablet':\n          return DeviceType.TABLET;\n\n        case 'smarttv':\n          return DeviceType.TV;\n\n        case 'console':\n        case 'embedded':\n        case 'wearable':\n          return DeviceType.UNKNOWN;\n\n        default:\n          return DeviceType.DESKTOP;\n      }\n    });\n\n    function getDeviceTypeAsync() {\n      return _getDeviceTypeAsync.apply(this, arguments);\n    }\n\n    return getDeviceTypeAsync;\n  }(),\n  isRootedExperimentalAsync: function () {\n    var _isRootedExperimentalAsync = _asyncToGenerator(function* () {\n      return false;\n    });\n\n    function isRootedExperimentalAsync() {\n      return _isRootedExperimentalAsync.apply(this, arguments);\n    }\n\n    return isRootedExperimentalAsync;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoDevice.web.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAAyB,mBAAzB;AACA,OAAO,QAAP,MAAqB,cAArB;AAEA,SAAS,UAAT;AAIA,IAAI,MAAM,GAAQ,IAAlB;;AACA,IAAI,QAAQ,CAAC,cAAb,EAA6B;EAC3B,IAAM,MAAM,GAAG,IAAI,QAAJ,CAAa,MAAM,CAAC,SAAP,CAAiB,SAA9B,CAAf;EACA,MAAM,GAAG,MAAM,CAAC,SAAP,EAAT;AACD;;AAED,SAAS,iBAAT,CAA2B,GAA3B,EAAsC;EACpC,OAAO,IAAI,CAAC,KAAL,CAAW,GAAG,YAAG,IAAH,EAAW,CAAX,CAAd,CAAP;AACD;;AAED,eAAe;EACb,IAAI,QAAJ,GAAY;IACV,OAAO,IAAP;EACD,CAHY;;EAIb,IAAI,KAAJ,GAAS;IACP,OAAO,IAAP;EACD,CANY;;EAOb,IAAI,YAAJ,GAAgB;IACd,OAAQ,MAAM,IAAI,MAAM,CAAC,MAAP,CAAc,MAAzB,IAAoC,IAA3C;EACD,CATY;;EAUb,IAAI,SAAJ,GAAa;IACX,OAAQ,MAAM,IAAI,MAAM,CAAC,MAAP,CAAc,KAAzB,IAAmC,IAA1C;EACD,CAZY;;EAab,IAAI,eAAJ,GAAmB;IACjB,OAAO,IAAP;EACD,CAfY;;EAgBb,IAAI,WAAJ,GAAe;IACb,IAAI,QAAQ,CAAC,cAAT,IAA2B,kBAAkB,SAAjD,EAA4D;MAC1D,iBAAyB,SAAzB;MAAA,IAAQ,YAAR,cAAQ,YAAR;MACA,OAAO,iBAAiB,CAAC,YAAD,CAAxB;IACD;;IACD,OAAO,IAAP;EACD,CAtBY;;EAuBb,IAAI,yBAAJ,GAA6B;IAC3B,OAAO,MAAM,IAAI,MAAM,CAAC,GAAP,CAAW,YAArB,GAAoC,CAAC,MAAM,CAAC,GAAP,CAAW,YAAZ,CAApC,GAAgE,IAAvE;EACD,CAzBY;;EA0Bb,IAAI,MAAJ,GAAU;IACR,OAAQ,MAAM,IAAI,MAAM,CAAC,EAAP,CAAU,IAArB,IAA8B,EAArC;EACD,CA5BY;;EA6Bb,IAAI,SAAJ,GAAa;IACX,OAAQ,MAAM,IAAI,MAAM,CAAC,EAAP,CAAU,OAArB,IAAiC,EAAxC;EACD,CA/BY;;EAgCb,IAAI,SAAJ,GAAa;IACX,OAAO,IAAP;EACD,CAlCY;;EAmCb,IAAI,iBAAJ,GAAqB;IACnB,OAAO,IAAP;EACD,CArCY;;EAsCb,IAAI,UAAJ,GAAc;IACZ,OAAO,IAAP;EACD,CAxCY;;EAyCP,kBAzCO;IAAA,yDAyCW;MACtB,QAAQ,MAAM,CAAC,MAAP,CAAc,IAAtB;QACE,KAAK,QAAL;UACE,OAAO,UAAU,CAAC,KAAlB;;QACF,KAAK,QAAL;UACE,OAAO,UAAU,CAAC,MAAlB;;QACF,KAAK,SAAL;UACE,OAAO,UAAU,CAAC,EAAlB;;QACF,KAAK,SAAL;QACA,KAAK,UAAL;QACA,KAAK,UAAL;UACE,OAAO,UAAU,CAAC,OAAlB;;QACF;UACE,OAAO,UAAU,CAAC,OAAlB;MAZJ;IAcD,CAxDY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAyDP,yBAzDO;IAAA,gEAyDkB;MAC7B,OAAO,KAAP;IACD,CA3DY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,CAAf","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\n\nimport { DeviceType } from './Device.types';\n\ntype NavigatorWithDeviceMemory = Navigator & { deviceMemory: number };\n\nlet result: any = null;\nif (Platform.isDOMAvailable) {\n  const parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nfunction convertGiBtoBytes(gib: number): number {\n  return Math.round(gib * 1024 ** 3);\n}\n\nexport default {\n  get isDevice(): boolean {\n    return true;\n  },\n  get brand(): null {\n    return null;\n  },\n  get manufacturer(): null {\n    return (result && result.device.vendor) || null;\n  },\n  get modelName(): string | null {\n    return (result && result.device.model) || null;\n  },\n  get deviceYearClass(): null {\n    return null;\n  },\n  get totalMemory(): number | null {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      const { deviceMemory } = navigator as NavigatorWithDeviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures(): string[] | null {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName(): string {\n    return (result && result.os.name) || '';\n  },\n  get osVersion(): string {\n    return (result && result.os.version) || '';\n  },\n  get osBuildId(): null {\n    return null;\n  },\n  get osInternalBuildId(): null {\n    return null;\n  },\n  get deviceName(): null {\n    return null;\n  },\n  async getDeviceTypeAsync(): Promise<DeviceType> {\n    switch (result.device.type) {\n      case 'mobile':\n        return DeviceType.PHONE;\n      case 'tablet':\n        return DeviceType.TABLET;\n      case 'smarttv':\n        return DeviceType.TV;\n      case 'console':\n      case 'embedded':\n      case 'wearable':\n        return DeviceType.UNKNOWN;\n      default:\n        return DeviceType.DESKTOP;\n    }\n  },\n  async isRootedExperimentalAsync(): Promise<boolean> {\n    return false;\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}