{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"./Text\";\nimport Divider from \"./Divider\";\nimport { useStyles } from \"./hooks/use-styles\";\n\nvar Banner = function Banner(_ref) {\n  var text = _ref.text,\n      illustration = _ref.illustration,\n      buttons = _ref.buttons,\n      style = _ref.style,\n      contentContainerStyle = _ref.contentContainerStyle,\n      illustrationContainerStyle = _ref.illustrationContainerStyle,\n      textContainerStyle = _ref.textContainerStyle,\n      textStyle = _ref.textStyle,\n      actionsContainerStyle = _ref.actionsContainerStyle;\n  var styles = useStyles(function (_ref2) {\n    var palette = _ref2.palette;\n    return {\n      container: {\n        backgroundColor: palette.surface.main\n      },\n      contentContainer: {\n        flexDirection: 'row',\n        marginTop: 24,\n        marginBottom: 4,\n        marginHorizontal: 16\n      },\n      illustrationContainer: {\n        marginEnd: 16\n      },\n      textContainer: {\n        flex: 1\n      },\n      text: {\n        color: palette.surface.on\n      },\n      actionsContainer: {\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        margin: 8\n      }\n    };\n  }, []);\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(View, {\n    style: [styles.contentContainer, contentContainerStyle]\n  }, illustration && React.createElement(View, {\n    style: [styles.illustrationContainer, illustrationContainerStyle]\n  }, typeof illustration === 'function' ? illustration({\n    size: 40\n  }) : illustration), React.createElement(View, {\n    style: [styles.textContainer, textContainerStyle]\n  }, typeof text === 'string' ? React.createElement(Text, {\n    variant: \"body2\",\n    style: [styles.text, textStyle]\n  }, text) : text)), React.createElement(View, {\n    style: [styles.actionsContainer, actionsContainerStyle]\n  }, Array.isArray(buttons) ? buttons.map(function (button, index) {\n    return React.createElement(React.Fragment, {\n      key: index\n    }, button, index !== buttons.length - 1 && React.createElement(View, {\n      style: {\n        width: 8\n      }\n    }));\n  }) : buttons), React.createElement(Divider, null));\n};\n\nexport default Banner;","map":{"version":3,"sources":["Banner.tsx"],"names":["Banner","actionsContainerStyle","styles","useStyles","palette","container","backgroundColor","main","contentContainer","flexDirection","marginTop","marginBottom","marginHorizontal","illustrationContainer","marginEnd","textContainer","flex","text","color","on","actionsContainer","justifyContent","alignItems","margin","illustration","size","Array","index","buttons","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, TextStyle, View, ViewStyle } from 'react-native';\nimport Text from './Text';\nimport Divider from './Divider';\nimport { useStyles } from './hooks/use-styles';\n\nexport interface BannerProps {\n  text: string | React.ReactElement | null;\n\n  illustration?: React.ReactElement | ((props: { size: number }) => React.ReactElement | null) | null;\n\n  buttons: React.ReactElement | React.ReactElement[] | null;\n\n  style?: StyleProp<ViewStyle>;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  illustrationContainerStyle?: StyleProp<ViewStyle>;\n\n  textContainerStyle?: StyleProp<ViewStyle>;\n\n  textStyle?: StyleProp<TextStyle>;\n\n  actionsContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Banner: React.FC<BannerProps> = ({\n  text,\n  illustration,\n  buttons,\n  style,\n  contentContainerStyle,\n  illustrationContainerStyle,\n  textContainerStyle,\n  textStyle,\n  actionsContainerStyle,\n}) => {\n  const styles = useStyles(\n    ({ palette }) => ({\n      container: {\n        backgroundColor: palette.surface.main,\n      },\n      contentContainer: {\n        flexDirection: 'row',\n        marginTop: 24,\n        marginBottom: 4,\n        marginHorizontal: 16,\n      },\n      illustrationContainer: {\n        marginEnd: 16,\n      },\n      textContainer: {\n        flex: 1,\n      },\n      text: {\n        color: palette.surface.on,\n      },\n      actionsContainer: {\n        flexDirection: 'row',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        margin: 8,\n      },\n    }),\n    []\n  );\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.contentContainer, contentContainerStyle]}>\n        {illustration && (\n          <View style={[styles.illustrationContainer, illustrationContainerStyle]}>\n            {typeof illustration === 'function' ? illustration({ size: 40 }) : illustration}\n          </View>\n        )}\n        <View style={[styles.textContainer, textContainerStyle]}>\n          {typeof text === 'string' ? (\n            <Text variant=\"body2\" style={[styles.text, textStyle]}>\n              {text}\n            </Text>\n          ) : (\n            text\n          )}\n        </View>\n      </View>\n      <View style={[styles.actionsContainer, actionsContainerStyle]}>\n        {Array.isArray(buttons)\n          ? buttons.map((button, index) => (\n              <React.Fragment key={index}>\n                {button}\n                {index !== buttons.length - 1 && <View style={{ width: 8 }} />}\n              </React.Fragment>\n            ))\n          : buttons}\n      </View>\n      <Divider />\n    </View>\n  );\n};\n\nexport default Banner;\n"]},"metadata":{},"sourceType":"module"}