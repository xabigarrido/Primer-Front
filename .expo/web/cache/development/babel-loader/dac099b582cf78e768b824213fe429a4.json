{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"category\", \"elevation\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { useStyles } from \"./hooks/use-styles\";\n\nvar Surface = function Surface(_ref) {\n  var category = _ref.category,\n      _ref$elevation = _ref.elevation,\n      elevation = _ref$elevation === void 0 ? 0 : _ref$elevation,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var styles = useStyles(function (_ref2) {\n    var elevations = _ref2.elevations,\n        shapes = _ref2.shapes,\n        surfaceColor = _ref2.surfaceColor;\n    return {\n      surface: _objectSpread(_objectSpread(_objectSpread({}, elevations[elevation]), category ? shapes[category] : {}), {}, {\n        backgroundColor: surfaceColor(elevation).hex()\n      })\n    };\n  }, [category, elevation]);\n  return React.createElement(Animated.View, _extends({\n    style: [styles.surface, style]\n  }, rest));\n};\n\nexport default Surface;","map":{"version":3,"sources":["Surface.tsx"],"names":["Surface","elevation","rest","styles","useStyles","surfaceColor","surface","elevations","category","shapes","backgroundColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;AAGA,SAAA,SAAA;;AAkBA,IAAMA,OAA+B,GAAG,SAAlCA,OAAkC,CAAA,IAAA,EAAiD;EAAhD,IAAA,QAAA,GAAgD,IAAhD,CAAA,QAAA;EAAA,qBAAgD,IAAhD,CAAYC,SAAZ;EAAA,IAAYA,SAAZ,+BAAA,CAAA;EAAA,IAAA,KAAA,GAAgD,IAAhD,CAAA,KAAA;EAAA,IAAqCC,IAArC,4BAAgD,IAAhD;;EACvC,IAAMC,MAAM,GAAGC,SAAS,CACtB,UAAA,KAAA,EAAA;IAAA,IAAC,UAAD,GAAA,KAAA,CAAC,UAAD;IAAA,IAAC,MAAD,GAAA,KAAA,CAAC,MAAD;IAAA,IAAuBC,YAAvB,GAAA,KAAA,CAAuBA,YAAvB;IAAA,OAA2C;MACzCC,OAAO,gDACFC,UAAU,CADN,SACM,CADR,GAEDC,QAAQ,GAAGC,MAAM,CAAT,QAAS,CAAT,GAFL,EAAF;QAGLC,eAAe,EAAEL,YAAY,CAAZA,SAAY,CAAZA,CAAAA,GAAAA;MAHZ;IADkC,CAA3C;EADsB,CAAA,EAQtB,CAAA,QAAA,EARF,SAQE,CARsB,CAAxB;EAWA,OAAO,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA;IAAe,KAAK,EAAE,CAACF,MAAM,CAAP,OAAA,EAAA,KAAA;EAAtB,CAAA,EAAP,IAAO,CAAA,CAAP;AAZF,CAAA;;AAeA,eAAA,OAAA","sourcesContent":["import React from 'react';\nimport { Animated, StyleProp, ViewProps, ViewStyle } from 'react-native';\nimport type { Elevation, ShapeCategory } from './base/ThemeContext';\nimport { useStyles } from './hooks/use-styles';\n\nexport interface SurfaceProps extends Omit<ViewProps, 'style'> {\n  /**\n   * The relative size of the surface.\n   */\n  category?: ShapeCategory;\n\n  /**\n   * The elevation of the surface.\n   *\n   * @default 0\n   */\n  elevation?: Elevation;\n\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n}\n\nconst Surface: React.FC<SurfaceProps> = ({ category, elevation = 0, style, ...rest }) => {\n  const styles = useStyles(\n    ({ elevations, shapes, surfaceColor }) => ({\n      surface: {\n        ...elevations[elevation],\n        ...(category ? shapes[category] : {}),\n        backgroundColor: surfaceColor(elevation).hex(),\n      },\n    }),\n    [category, elevation]\n  );\n\n  return <Animated.View style={[styles.surface, style]} {...rest} />;\n};\n\nexport default Surface;\n"]},"metadata":{},"sourceType":"module"}